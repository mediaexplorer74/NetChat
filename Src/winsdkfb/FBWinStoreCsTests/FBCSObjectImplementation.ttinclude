//------------------------------------------------------------------------------
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
    XmlDocument doc = new XmlDocument();
    doc.Load(classDefFile);

    XmlNode rootNode = doc.SelectSingleNode("class");

    string className = rootNode.Attributes["name"].Value;
    bool bindable = ((rootNode.Attributes["bindable"] != null) && rootNode.Attributes["bindable"].Value.Equals("yes"));
    string appNamespace= rootNode.Attributes["namespace"].Value;
    if (appNamespace.Length == 0)
    {
        // Default to same namespace as the SDK.
        appNamespace = "winsdkfb";
    }
#>

using System;
using System.ComponentModel;
using Newtonsoft.Json;
using winsdkfb;

<#  
    string interfaces = "";
    if (bindable)
    {
        interfaces += "INotifyPropertyChanged";
#>
using Windows.ApplicationModel.Core;
using Windows.UI.Xaml.Data;

<#
    }
#>
namespace <#= appNamespace #>
{
    public class <#= className #> : <#= interfaces #>
    {
<#
    if (bindable)
    {
#>
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(
            string propName
            )
        {
            PropertyChangedEventHandler h = PropertyChanged;
            if (h != null)
            {
                h(this, new PropertyChangedEventArgs(propName));
            }
        }
<#
    }
#>     
        public <#= className #>()
        {
<#
    XmlNodeList props = rootNode.SelectNodes("property");
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string varName = "_" + prop.Attributes["name"].Value;
        string varType = CSTypeFor(prop);

        if (varType.Equals("string"))
        {
            WriteLine("            " + varName + " = null;");
        }
        else if (varType.Equals("int32"))
        {
            WriteLine("            " + varName + " = -1;");
        }
        else if (varType.Equals("bool"))
        {
            WriteLine("            " + varName + " = false;");
        }
        else if (varType.Equals("fbclass"))
        {
            WriteLine("            " + varName + " = null;");
        }
    }
#>
        }
<#
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string propName = PropNameFor(prop);
        string varName = "_" + prop.Attributes["name"].Value;
        string varType = CSTypeFor(prop);
        string jsonProps = 
            "PropertyName = \"" + prop.Attributes["name"].Value + "\"";
        var requiredProp = prop.Attributes["required"];
        if (requiredProp != null)
        {
            if (string.CompareOrdinal(requiredProp.Value, "true") == 0)
            {
                jsonProps += ", Required = Required.Always";
            }
        }
#>
        [JsonProperty(<#= jsonProps #>)]
        public <#= varType #> <#= propName #>
        {
            get
            {
                return <#= varName #>;
            }
            set
            {
                <#= varName #> = value;
<#
        if (bindable)
        {
#>
                OnPropertyChanged("<#= propName #>");
<#
        }
#>
            }
        }
<#
    }
#>
        public static <#= className #> FromJson(
            string JsonText
            )
        {
            <#= className #> obj;

            try
            {
                obj = JsonConvert.DeserializeObject<<#= className #>>(JsonText);
            }
            catch (JsonException)
            {
                obj = null;
            }
            return obj;
        }
<#
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string varName = "_" + prop.Attributes["name"].Value;
        string varType = CSTypeFor(prop);
#>
        private <#= varType #> <#= varName #>;
<#
    }
#>
    }
}

<#@ include file="Utility.ttinclude" #>