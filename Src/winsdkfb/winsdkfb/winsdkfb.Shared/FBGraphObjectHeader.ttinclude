//------------------------------------------------------------------------------
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#
    XmlDocument doc = new XmlDocument();
    doc.Load(classDefFile);

    XmlNode rootNode = doc.SelectSingleNode("class");

    string className = rootNode.Attributes["name"].Value;
    bool bindable = ((rootNode.Attributes["bindable"] != null) && 
        rootNode.Attributes["bindable"].Value.Equals("yes"));
#>

#pragma once
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------

#include "JsonClassFactory.h"
<#
    XmlNodeList props = rootNode.SelectNodes("property");
    for (int i = 0; i < props.Count; i++)
    {
        XmlNode prop = props[i];
        string varType = prop.Attributes["type"].Value;
        if (varType.Equals("fbclass"))
        {
            string memberClassName = prop.Attributes["className"].Value;
#>
#include "<#= memberClassName #>.h"
<#
        }
    }
#>

namespace winsdkfb
{
    namespace Graph
    {
<#
    string interfaces = "";
    if (bindable)
    {
        interfaces += 
            ":\n            Windows::UI::Xaml::Data::INotifyPropertyChanged";
#>
        [Windows::Foundation::Metadata::WebHostHidden]
        [Windows::UI::Xaml::Data::Bindable]
<#
    }
#>
        public ref class <#= className #> sealed <#= interfaces #>
        {
            public:
<#
    if (bindable)
    {
#>
                virtual event Windows::UI::Xaml::Data::PropertyChangedEventHandler^ 
                    PropertyChanged;

<#
    }
#>
                static Object^ FromJson(
                    Platform::String^ JsonText 
                    );

<#

    foreach (XmlNode child in rootNode.SelectNodes("property"))
    {
        string fullType = FullTypeFor(child);
        string propName  = PropNameFor(child);
#>
                property <#= fullType #> <#= propName #>
                {
                    <#= fullType #> get();
                    void set(<#= fullType#> value);
                }

<#
    }
#>
            private:
                <#= className #>(
                    );

<#
    if (bindable)
    {
#>
                void NotifyPropertyChanged(
                    Platform::String^ prop
                    );

<#
    }

    foreach (XmlNode child in rootNode.SelectNodes("property"))       
    {
        string fullType = FullTypeFor(child);
        string varName  = MemberNameFor(child);
#>
                <#= fullType #> <#= varName #>;
<#
    }
#>
        };
    }
}

<#@ include file="Utility.ttinclude" #>
