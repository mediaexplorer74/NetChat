

//------------------------------------------------------------------------------
//
// Copyright (c) 2015 Microsoft Corporation. All rights reserved.
//
// This code is licensed under the MIT License (MIT).
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------




#include "pch.h"
#include "FBUser.h"

using namespace winsdkfb;
using namespace winsdkfb::Graph;
using namespace Platform;
using namespace Windows::Data::Json;
using namespace Windows::Foundation::Collections;

FBUser::FBUser(
    ) :
    _id(nullptr),
    _first_name(nullptr),
    _gender(nullptr),
    _last_name(nullptr),
    _email(nullptr),
    _link(nullptr),
    _locale(nullptr),
    _location(nullptr),
    _name(nullptr),
    _picture(nullptr),
    __timezone(-1),
    _updated_time(nullptr),
    _verified(false)

{
    ;
}


String^ FBUser::Id::get()
{
    return _id;
}
void FBUser::Id::set(String^ value)
{
    _id = value;

}


String^ FBUser::FirstName::get()
{
    return _first_name;
}
void FBUser::FirstName::set(String^ value)
{
    _first_name = value;

}


String^ FBUser::Gender::get()
{
    return _gender;
}
void FBUser::Gender::set(String^ value)
{
    _gender = value;

}


String^ FBUser::LastName::get()
{
    return _last_name;
}
void FBUser::LastName::set(String^ value)
{
    _last_name = value;

}


String^ FBUser::Email::get()
{
    return _email;
}
void FBUser::Email::set(String^ value)
{
    _email = value;

}


String^ FBUser::Link::get()
{
    return _link;
}
void FBUser::Link::set(String^ value)
{
    _link = value;

}


String^ FBUser::Locale::get()
{
    return _locale;
}
void FBUser::Locale::set(String^ value)
{
    _locale = value;

}


FBPage^ FBUser::Location::get()
{
    return _location;
}
void FBUser::Location::set(FBPage^ value)
{
    _location = value;

}


String^ FBUser::Name::get()
{
    return _name;
}
void FBUser::Name::set(String^ value)
{
    _name = value;

}


FBProfilePictureData^ FBUser::Picture::get()
{
    return _picture;
}
void FBUser::Picture::set(FBProfilePictureData^ value)
{
    _picture = value;

}


int FBUser::Timezone::get()
{
    return __timezone;
}
void FBUser::Timezone::set(int value)
{
    __timezone = value;

}


String^ FBUser::UpdatedTime::get()
{
    return _updated_time;
}
void FBUser::UpdatedTime::set(String^ value)
{
    _updated_time = value;

}


bool FBUser::Verified::get()
{
    return _verified;
}
void FBUser::Verified::set(bool value)
{
    _verified = value;

}


Object^ FBUser::FromJson(
    String^ JsonText 
    )
{
    FBUser^ result = ref new FBUser;
    int found = 0;
    JsonValue^ val = nullptr;

    if (JsonValue::TryParse(JsonText, &val))
    {
        if (val->ValueType == JsonValueType::Object)
        {
            JsonObject^ obj = val->GetObject();
            IIterator<IKeyValuePair<String^, IJsonValue^>^>^ it = nullptr;
            for (it = obj->First(); it->HasCurrent; it->MoveNext())
            {
                String^ key = it->Current->Key;

                if  (!String::CompareOrdinal(key, L"id"))
                {

                    found++;
                    result->Id = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"first_name"))
                {

                    found++;
                    result->FirstName = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"gender"))
                {

                    found++;
                    result->Gender = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"last_name"))
                {

                    found++;
                    result->LastName = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"email"))
                {

                    found++;
                    result->Email = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"link"))
                {

                    found++;
                    result->Link = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"locale"))
                {

                    found++;
                    result->Locale = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"location"))
                {

                    found++;
                    result->Location = static_cast<FBPage^>(FBPage::FromJson(it->Current->Value->Stringify()));

                }

                else if (!String::CompareOrdinal(key, L"name"))
                {

                    found++;
                    result->Name = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"picture"))
                {

                    found++;
                    result->Picture = static_cast<FBProfilePictureData^>(FBProfilePictureData::FromJson(it->Current->Value->Stringify()));

                }

                else if (!String::CompareOrdinal(key, L"timezone"))
                {

                    found++;
                    result->Timezone = static_cast<int>(it->Current->Value->GetNumber());

                }

                else if (!String::CompareOrdinal(key, L"updated_time"))
                {

                    found++;
                    result->UpdatedTime = it->Current->Value->GetString();

                }

                else if (!String::CompareOrdinal(key, L"verified"))
                {

                    found++;
                    result->Verified = it->Current->Value->GetBoolean();

                }

            }

            if (!found)
            {
                // No field names matched any known properties for this class.  
                // Even if it *is* an object of our type, it's not useful.
                result = nullptr;
            }
        }
    }
    return result;
}




